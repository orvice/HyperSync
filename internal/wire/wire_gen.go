// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"go.orx.me/apps/hyper-sync/internal/app"
	"go.orx.me/apps/hyper-sync/internal/conf"
	"go.orx.me/apps/hyper-sync/internal/dao"
	"go.orx.me/apps/hyper-sync/internal/server"
	"go.orx.me/apps/hyper-sync/internal/service"
)

// Injectors from wire.go:

func NewApiServer() (*app.ApiServer, error) {
	client, err := dao.NewMongoClient()
	if err != nil {
		return nil, err
	}
	mongoDAO := dao.NewMongoDAO(client)
	hyperSyncService := service.NewHyperSyncService(mongoDAO)
	userDAO := dao.NewUserDAO(mongoDAO)
	redisClient := dao.NewRedisClient()
	config := conf.Get()
	authService := service.NewAuthService(userDAO, redisClient, config)
	apiServer, err := app.NewApiServer(hyperSyncService, authService)
	if err != nil {
		return nil, err
	}
	return apiServer, nil
}

func NewAuthServer() (*server.AuthServer, error) {
	client, err := dao.NewMongoClient()
	if err != nil {
		return nil, err
	}
	mongoDAO := dao.NewMongoDAO(client)
	userDAO := dao.NewUserDAO(mongoDAO)
	redisClient := dao.NewRedisClient()
	config := conf.Get()
	authService := service.NewAuthService(userDAO, redisClient, config)
	authServer := server.NewAuthServer(authService)
	return authServer, nil
}
