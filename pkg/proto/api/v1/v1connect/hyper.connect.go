// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/hyper.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "go.orx.me/apps/hyper-sync/pkg/proto/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HyperSyncServiceName is the fully-qualified name of the HyperSyncService service.
	HyperSyncServiceName = "api.v1.HyperSyncService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HyperSyncServiceListPostsProcedure is the fully-qualified name of the HyperSyncService's
	// ListPosts RPC.
	HyperSyncServiceListPostsProcedure = "/api.v1.HyperSyncService/ListPosts"
	// HyperSyncServiceGetPostProcedure is the fully-qualified name of the HyperSyncService's GetPost
	// RPC.
	HyperSyncServiceGetPostProcedure = "/api.v1.HyperSyncService/GetPost"
	// HyperSyncServiceCreatePostProcedure is the fully-qualified name of the HyperSyncService's
	// CreatePost RPC.
	HyperSyncServiceCreatePostProcedure = "/api.v1.HyperSyncService/CreatePost"
	// HyperSyncServiceDeletePostProcedure is the fully-qualified name of the HyperSyncService's
	// DeletePost RPC.
	HyperSyncServiceDeletePostProcedure = "/api.v1.HyperSyncService/DeletePost"
)

// HyperSyncServiceClient is a client for the api.v1.HyperSyncService service.
type HyperSyncServiceClient interface {
	// ListPosts retrieves a list of posts with optional filtering
	ListPosts(context.Context, *connect.Request[v1.ListPostsRequest]) (*connect.Response[v1.ListPostsResponse], error)
	// GetPost retrieves a single post by ID
	GetPost(context.Context, *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error)
	// CreatePost creates a new post
	CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error)
	// DeletePost deletes a post by ID
	DeletePost(context.Context, *connect.Request[v1.DeletePostRequest]) (*connect.Response[v1.DeletePostResponse], error)
}

// NewHyperSyncServiceClient constructs a client for the api.v1.HyperSyncService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHyperSyncServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HyperSyncServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	hyperSyncServiceMethods := v1.File_api_v1_hyper_proto.Services().ByName("HyperSyncService").Methods()
	return &hyperSyncServiceClient{
		listPosts: connect.NewClient[v1.ListPostsRequest, v1.ListPostsResponse](
			httpClient,
			baseURL+HyperSyncServiceListPostsProcedure,
			connect.WithSchema(hyperSyncServiceMethods.ByName("ListPosts")),
			connect.WithClientOptions(opts...),
		),
		getPost: connect.NewClient[v1.GetPostRequest, v1.GetPostResponse](
			httpClient,
			baseURL+HyperSyncServiceGetPostProcedure,
			connect.WithSchema(hyperSyncServiceMethods.ByName("GetPost")),
			connect.WithClientOptions(opts...),
		),
		createPost: connect.NewClient[v1.CreatePostRequest, v1.CreatePostResponse](
			httpClient,
			baseURL+HyperSyncServiceCreatePostProcedure,
			connect.WithSchema(hyperSyncServiceMethods.ByName("CreatePost")),
			connect.WithClientOptions(opts...),
		),
		deletePost: connect.NewClient[v1.DeletePostRequest, v1.DeletePostResponse](
			httpClient,
			baseURL+HyperSyncServiceDeletePostProcedure,
			connect.WithSchema(hyperSyncServiceMethods.ByName("DeletePost")),
			connect.WithClientOptions(opts...),
		),
	}
}

// hyperSyncServiceClient implements HyperSyncServiceClient.
type hyperSyncServiceClient struct {
	listPosts  *connect.Client[v1.ListPostsRequest, v1.ListPostsResponse]
	getPost    *connect.Client[v1.GetPostRequest, v1.GetPostResponse]
	createPost *connect.Client[v1.CreatePostRequest, v1.CreatePostResponse]
	deletePost *connect.Client[v1.DeletePostRequest, v1.DeletePostResponse]
}

// ListPosts calls api.v1.HyperSyncService.ListPosts.
func (c *hyperSyncServiceClient) ListPosts(ctx context.Context, req *connect.Request[v1.ListPostsRequest]) (*connect.Response[v1.ListPostsResponse], error) {
	return c.listPosts.CallUnary(ctx, req)
}

// GetPost calls api.v1.HyperSyncService.GetPost.
func (c *hyperSyncServiceClient) GetPost(ctx context.Context, req *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error) {
	return c.getPost.CallUnary(ctx, req)
}

// CreatePost calls api.v1.HyperSyncService.CreatePost.
func (c *hyperSyncServiceClient) CreatePost(ctx context.Context, req *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error) {
	return c.createPost.CallUnary(ctx, req)
}

// DeletePost calls api.v1.HyperSyncService.DeletePost.
func (c *hyperSyncServiceClient) DeletePost(ctx context.Context, req *connect.Request[v1.DeletePostRequest]) (*connect.Response[v1.DeletePostResponse], error) {
	return c.deletePost.CallUnary(ctx, req)
}

// HyperSyncServiceHandler is an implementation of the api.v1.HyperSyncService service.
type HyperSyncServiceHandler interface {
	// ListPosts retrieves a list of posts with optional filtering
	ListPosts(context.Context, *connect.Request[v1.ListPostsRequest]) (*connect.Response[v1.ListPostsResponse], error)
	// GetPost retrieves a single post by ID
	GetPost(context.Context, *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error)
	// CreatePost creates a new post
	CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error)
	// DeletePost deletes a post by ID
	DeletePost(context.Context, *connect.Request[v1.DeletePostRequest]) (*connect.Response[v1.DeletePostResponse], error)
}

// NewHyperSyncServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHyperSyncServiceHandler(svc HyperSyncServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	hyperSyncServiceMethods := v1.File_api_v1_hyper_proto.Services().ByName("HyperSyncService").Methods()
	hyperSyncServiceListPostsHandler := connect.NewUnaryHandler(
		HyperSyncServiceListPostsProcedure,
		svc.ListPosts,
		connect.WithSchema(hyperSyncServiceMethods.ByName("ListPosts")),
		connect.WithHandlerOptions(opts...),
	)
	hyperSyncServiceGetPostHandler := connect.NewUnaryHandler(
		HyperSyncServiceGetPostProcedure,
		svc.GetPost,
		connect.WithSchema(hyperSyncServiceMethods.ByName("GetPost")),
		connect.WithHandlerOptions(opts...),
	)
	hyperSyncServiceCreatePostHandler := connect.NewUnaryHandler(
		HyperSyncServiceCreatePostProcedure,
		svc.CreatePost,
		connect.WithSchema(hyperSyncServiceMethods.ByName("CreatePost")),
		connect.WithHandlerOptions(opts...),
	)
	hyperSyncServiceDeletePostHandler := connect.NewUnaryHandler(
		HyperSyncServiceDeletePostProcedure,
		svc.DeletePost,
		connect.WithSchema(hyperSyncServiceMethods.ByName("DeletePost")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.HyperSyncService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HyperSyncServiceListPostsProcedure:
			hyperSyncServiceListPostsHandler.ServeHTTP(w, r)
		case HyperSyncServiceGetPostProcedure:
			hyperSyncServiceGetPostHandler.ServeHTTP(w, r)
		case HyperSyncServiceCreatePostProcedure:
			hyperSyncServiceCreatePostHandler.ServeHTTP(w, r)
		case HyperSyncServiceDeletePostProcedure:
			hyperSyncServiceDeletePostHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHyperSyncServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHyperSyncServiceHandler struct{}

func (UnimplementedHyperSyncServiceHandler) ListPosts(context.Context, *connect.Request[v1.ListPostsRequest]) (*connect.Response[v1.ListPostsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.HyperSyncService.ListPosts is not implemented"))
}

func (UnimplementedHyperSyncServiceHandler) GetPost(context.Context, *connect.Request[v1.GetPostRequest]) (*connect.Response[v1.GetPostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.HyperSyncService.GetPost is not implemented"))
}

func (UnimplementedHyperSyncServiceHandler) CreatePost(context.Context, *connect.Request[v1.CreatePostRequest]) (*connect.Response[v1.CreatePostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.HyperSyncService.CreatePost is not implemented"))
}

func (UnimplementedHyperSyncServiceHandler) DeletePost(context.Context, *connect.Request[v1.DeletePostRequest]) (*connect.Response[v1.DeletePostResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.HyperSyncService.DeletePost is not implemented"))
}
